name: "Ship - Demo"

on:
  pull_request:
    branches:
      - trunk
    types:
      - opened
      - synchronize
      - ready_for_review
    paths:
      - 'frontend/**'
      - 'src/**'
      - 'pom.xml'
      - 'Dockerfile*'

jobs:
  ship2demo:
    name: Ship::Demo
    runs-on: self-hosted
    if: github.event.pull_request.draft == false

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Login to quay.io
        run: echo "${{ secrets.QUAY_TOKEN }}" | docker login -u "${{ secrets.QUAY_USERNAME }}" --password-stdin quay.io

      - name: Resolve Dependencies
        run: mvn --batch-mode --update-snapshots dependency:tree

      - name: Complile JAR
        run: mvn --batch-mode --update-snapshots clean package -P production-mode,noTesting

      - name: Docker build and tag
        run: docker build -f Dockerfile.PROD -t quay.io/kyberorg/yalsee:demo .

      - name: Docker push
        run: docker push quay.io/kyberorg/yalsee:demo

      - name: Delete pushed image to prevent mess
        run: docker rmi quay.io/kyberorg/yalsee:demo

      - name: Deploy
        uses: wei/curl@master
        with:
          args: -X POST ${{ secrets.DEMO_DEPLOY_HOOK }}

      - name: Get deployed commit SHA
        id: deployed_commit
        run: echo "::set-output name=sha::$(echo $GITHUB_SHA | cut -c1-7)"

      - name: Wait for site appears online
        uses: kyberorg/wait_for_new_version@v2
        with:
          url: https://demo.yals.ee
          responseCode: 200
          timeout: 120
          interval: 1.5
          hasActuator: true
          commitSha: ${{ steps.deployed_commit.outputs.sha }}
  test-demo:
    name: Test::Demo
    needs: ship2demo
    runs-on: self-hosted
    if: github.event.pull_request.draft == false
    outputs:
      rerunFlag: ${{ steps.runTests.outcome }}

    steps:
      - name: Get current date
        id: date
        run: echo "::set-output name=date::$(date +'%y%m%d-%H%M')"

      - name: Test App
        id: runTests
        continue-on-error: true
        run: mvn -Ptesting-only -Dtest.url=https://demo.yals.ee -Dgrid.hostname=http://127.0.0.1:4444 -Dselenide.browser=chrome -Dtest.buildName=yalsee-demo-${{ steps.date.outputs.date }} -Dapp.shortUrl=https://q.yls.ee -Dtest.deleteToken=${{ secrets.DEMO_DELETE_TOKEN }} -Dtest="HomePageTest" -Dtest.report.failed-tests-filename=target/test-fails.txt -Dtest.show-test-names-in-video=true clean test
        env:
          JAVA_HOME: /srv/java11

      - name: Publish List of failing tests (if any)
        uses: actions/upload-artifact@v2
        continue-on-error: true
        with:
          name: test-fails
          path: target/test-fails.txt
          if-no-files-found: ignore

      - name: Publish Screenshots of failing tests (if any)
        uses: actions/upload-artifact@v2
        continue-on-error: true
        with:
          name: failedTests
          path: target/reports/**/*.png
          if-no-files-found: ignore

      - name: Publish Unit Test Results
        uses: EnricoMi/publish-unit-test-result-action@v1.27
        if: always()
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          check_name: Demo Unit Test Results
          comment_title: Demo Unit Test Statistics
          hide_comments: all but latest
          comment_mode: 'update last'
          test_changes_limit: 5
          files: target/surefire-reports/**/*.xml
          report_individual_runs: true
          deduplicate_classes_by_file_name: false
          check_run_annotations: all tests, skipped tests

      - name: Delete Test Video (No failed tests)
        if: steps.runTests.outcome == 'success'
        uses: wei/curl@master
        continue-on-error: true
        with:
          args: -X DELETE -H "X-Token:${{ secrets.GRID_API_TOKEN }}" ${{ secrets.GRID_API_ENDPOINT }}/videos/yalsee-demo-${{ steps.date.outputs.date }}

  rerun-tests-demo:
    name: Test::ReRun::Demo
    needs: test-demo
    runs-on: self-hosted
    if: needs.test-demo.outputs.rerunFlag == 'failure'

    steps:
      - name: debug
        run: echo ${{ needs.test-demo.outputs.rerunFlag }}
      - name: download file
        uses: actions/download-artifact@v2
        with:
          name: test-fails
      - name: cat it
        run: cat test-fails.txt

